open Ppx_hash_lib.Std
open Hash.Builtin

#verbose true

module type Interface_for_types_named_t = sig
  type t [@@deriving hash]
end
[%%expect{|
module type Interface_for_types_named_t =
  sig
    type t
    val hash_fold_t : Hash.state -> t -> Hash.state
    val hash : t -> int
  end
|}]

module type Interface_for_types_named_other_than_t = sig
  type my_type [@@deriving hash]
end
[%%expect{|
module type Interface_for_types_named_other_than_t =
  sig
    type my_type
    val hash_fold_my_type : Hash.state -> my_type -> Hash.state
    val hash_my_type : my_type -> int
  end
|}]

module type Interface_for_poly_types = sig
  type 'a my_container [@@deriving hash]
end
[%%expect{|
module type Interface_for_poly_types =
  sig
    type 'a my_container
    val hash_fold_my_container :
      (Hash.state -> 'a -> Hash.state) ->
      Hash.state -> 'a my_container -> Hash.state
  end
|}]


module Use_of_hash_fold_syntax_extension = struct
  let f = [%hash_fold: (int * string) list]
end
[%%expect{|
module Use_of_hash_fold_syntax_extension :
  sig val f : Hash.state -> (int * bytes) list -> Hash.state end
|}]

module Support_for_builtins = struct
  let f = [%hash_fold: (nativeint * int64 * int32 * char * int * bool * string * float * unit) option list lazy_t]
end
[%%expect{|
module Support_for_builtins :
  sig
    val f :
      Hash.state ->
      (nativeint * int64 * int32 * char * int * bool * bytes * float * unit)
      option list lazy_t -> Hash.state
  end
|}]

(* negative tests... *)

module No_builtin_support_for_array = struct
  type fail = int array [@@deriving hash]
end
[%%expect{|
Line _, characters 18-23:
Error: Unbound value hash_fold_array
|}]

module No_builtin_support_for_ref = struct
  type fail = int ref [@@deriving hash]
end
[%%expect{|
Line _, characters 18-21:
Error: Unbound value hash_fold_ref
Hint: Did you mean hash_fold_int?
|}]

type fail = int -> int [@@deriving hash]
[%%expect{|
Line _, characters 12-22:
ppx_hash: functions can not be hashed.
|}]

type fail = < f : int > [@@deriving hash]
[%%expect{|
Line _, characters 12-23:
ppx_hash: unsupported type: < f :int  >
|}]

type fail = .. [@@deriving hash]
[%%expect{|
Line _, characters 0-32:
ppx_hash: open types are not supported
|}]

type fail = [> `Foo ] [@@deriving hash]
[%%expect{|
Line _, characters 12-21:
ppx_hash: cannot hash open polymorphic variant types
|}]

type fail = {
  mutable u : int;
  s : string;
} [@@deriving hash]
[%%expect{|
Line _, characters 2-18:
ppx_hash: require [@with_hashing] or [@no_hashing] on mutable record field
|}]

type fail = {
  mutable u : int; [@with_hashing] [@no_hashing]
  s : string;
} [@@deriving hash]
[%%expect{|
Line _, characters 2-48:
ppx_hash: record field cannot be both [@with_hashing] and [@no_hashing]
|}]

type fail = {
  u : int; [@with_hashing]
  s : string;
} [@@deriving hash]
[%%expect{|
Line _, characters 2-26:
ppx_hash: unexpected [@with_hashing] on non-mutable record field
|}]
